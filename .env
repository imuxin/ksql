# =  是最基本的赋值, 将整个makefile展开后，再决定变量的值。
# := 是覆盖之前的值, 表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。
# ?= 是如果没有被赋值过就赋予等号后面的值
# += 是添加等号后面的值

BUILD ?= build
GO ?= go

TEST_PACKAGE = "./..."

PLATFORM=$(shell uname -s)

OSFLAG 				:=
ifeq ($(OS),Windows_NT)
    PLATFORM = WIN32
	OSFLAG += -D WIN32
	ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
		OSFLAG += -D AMD64
	endif
	ifeq ($(PROCESSOR_ARCHITECTURE),x86)
		OSFLAG += -D IA32
	endif
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
        PLATFORM = LINUX
		OSFLAG += -D LINUX
	endif
	ifeq ($(UNAME_S),Darwin)
        PLATFORM = OSX
		OSFLAG += -D OSX
	endif
		UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		OSFLAG += -D AMD64
	endif
		ifneq ($(filter %86,$(UNAME_P)),)
	OSFLAG += -D IA32
		endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		OSFLAG += -D ARM
	endif
endif

# WHY using this ldflags, related links:
#   https://github.com/alecthomas/participle/issues/251
#   https://github.com/golang/go/issues/19529
#   https://github.com/golang/go/issues/9510
#   https://go-review.googlesource.com/c/go/+/16741
LDFLAGS_LINUX_build = -ldflags "-extldflags=-Wl,--allow-multiple-definition"
LDFLAGS_LINUX_release = -ldflags "-extldflags=-Wl,--allow-multiple-definition -s -w"

LDFLAGS_OSX_release = -ldflags "-s -w"

LDFLAGS = ${LDFLAGS_${PLATFORM}_${BUILD}}
